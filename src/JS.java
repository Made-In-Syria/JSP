/* Generated By:JavaCC: Do not edit this line. JS.java */
import java.io.IOException;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.Scanner;




public class JS implements JSConstants {
                        public static HashMap<String, Value> Vars = new HashMap<String, Value>();
  public static void main(String[] args) throws ParseException, TokenMgrError, FileNotFoundException {

                        JS Js = new JS(new FileReader("D:\\test.js"));
                        StartNode S = Start();
                        S.execute(Vars);
                }

//TOKEN : /* Assignment ops */
//{
//	< EQ: "=">
//|	< #PE: "+=">
//|	< #ME: "-=">
//|	< #MUE: "*=">
//|	< #DEE: "/=">
//|	< #MODE: "%=">
//|	< ASSIGNMENTOP: (<PE> | <ME> | <MUE> | <DEE> | <MODE>  )>
//
//
//}
  static final public StartNode Start() throws ParseException {
        StartNode n = new StartNode();
        TreeNode next;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FOR:
      case WHILE:
      case DO:
      case VAR:
      case IF:
      case STOP:
      case FUNCTION:
      case NEW:
      case NUM:
      case PRINT:
      case READ:
      case ID:
      case String:
      case 34:
      case 46:
      case 53:
      case 56:
      case 57:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      next = Statement();
                              n.addChild(next);
    }
    jj_consume_token(0);
         {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  static final public TreeNode Statement() throws ParseException {
        TreeNode n;
    if (jj_2_1(5)) {
      n = Assignment();
      jj_consume_token(SEMICOLON);
    } else if (jj_2_2(4)) {
      n = ExpStatement();
      jj_consume_token(SEMICOLON);
    } else if (jj_2_3(4)) {
      n = FunctionCallStatement();
      jj_consume_token(SEMICOLON);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PRINT:
        n = PRINT_Command();
        jj_consume_token(SEMICOLON);
        break;
      case IF:
        n = IF_Statement();
        break;
      case FOR:
        n = FOR_Statement();
        break;
      case WHILE:
        n = While_Statement();
        break;
      case DO:
        n = DoWhile_Statement();
        jj_consume_token(SEMICOLON);
        break;
      case READ:
        n = Read_Command();
        jj_consume_token(SEMICOLON);
        break;
      case STOP:
        n = StopStatement();
        jj_consume_token(SEMICOLON);
        break;
      case FUNCTION:
        n = FunctionStatement();
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
         {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  static final public TreeNode Assignment() throws ParseException {
        AssignmentNode n; //= new AssignmentNode();
        ArrayNode a = null;
        Token t;
        TreeNode exp;
        TreeNode e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
      jj_consume_token(VAR);
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    t = jj_consume_token(ID);
                    n = new AssignmentNode(t.image);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 34:
      jj_consume_token(34);
      e = Exp();
                          n.isIndex = true; n.index = e;
      jj_consume_token(35);
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    t = jj_consume_token(36);
                                                      n.Type = t.image;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NEW:
    case NUM:
    case ID:
    case String:
    case 34:
    case 46:
    case 53:
    case 56:
    case 57:
      exp = Exp();
                                                                                      n.addChild(exp);
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
                if(a != null)
                        {if (true) return a;}
                {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  static final public TreeNode ExpStatement() throws ParseException {
        PrintNode n = new PrintNode();
        TreeNode e;
        Token t;
    e = Exp();
         n.addChild(e);
         {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  static final public TreeNode Exp() throws ParseException {
        ExpressionNode n = new ExpressionNode();
        TreeNode n1,n2 = null;
        TreeNode e = null;
    n1 = FirstPriorety();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 37:
        jj_consume_token(37);
        n2 = Exp();
                                                  n.type = '='; n.addChild(n1);n.addChild(n2);
        break;
      case 38:
        jj_consume_token(38);
        n2 = Exp();
                                                  n.type = 'o'; n.addChild(n1);n.addChild(n2);
        break;
      case 39:
        jj_consume_token(39);
        n2 = Exp();
                                                n.type = '<';   n.addChild(n1);n.addChild(n2);
        break;
      case 40:
        jj_consume_token(40);
        n2 = Exp();
                                                n.type = '>';   n.addChild(n1);n.addChild(n2);
        break;
      case 41:
        jj_consume_token(41);
        n2 = Exp();
                                                 n.type = 'l';  n.addChild(n1);n.addChild(n2);
        break;
      case 42:
        jj_consume_token(42);
        n2 = Exp();
                                                 n.type = 'g';  n.addChild(n1);n.addChild(n2);
        break;
      default:
        jj_la1[5] = jj_gen;
        if (jj_2_4(2)) {
          jj_consume_token(43);
          n2 = Exp();
                                                       n.type = '!';n.addChild(n1);n.addChild(n2);
        } else if (jj_2_5(2)) {
          jj_consume_token(44);
          n2 = Exp();
                                                      n.type = '+';     n.addChild(n1);n.addChild(n2);
        } else if (jj_2_6(2)) {
          jj_consume_token(45);
          n2 = Exp();
                                                      n.type = '-';     n.addChild(n1);n.addChild(n2);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
                if (n2 == null)
                        {if (true) return n1;}
                else
                        {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  static final public TreeNode FirstPriorety() throws ParseException {
        ExpressionNode n = new ExpressionNode();
        TreeNode n1,n2 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 46:
      jj_consume_token(46);
      n1 = Exp();
      jj_consume_token(47);
      break;
    case NEW:
    case NUM:
    case ID:
    case String:
    case 34:
    case 53:
    case 56:
    case 57:
      n1 = I();
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
      if (jj_2_7(2)) {
        jj_consume_token(48);
        n2 = FirstPriorety();
                                                                n.type = '*';   n.addChild(n1);n.addChild(n2);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 49:
          jj_consume_token(49);
          n2 = Exp();
                                                  n.type = 'a'; n.addChild(n1);n.addChild(n2);
          break;
        default:
          jj_la1[8] = jj_gen;
          if (jj_2_8(2)) {
            jj_consume_token(50);
            n2 = FirstPriorety();
                                                               n.type = '/';    n.addChild(n1);n.addChild(n2);
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 51:
              jj_consume_token(51);
              n2 = FirstPriorety();
                                                         n.type = '^';  n.addChild(n1);n.addChild(n2);
              break;
            default:
              jj_la1[9] = jj_gen;
              if (jj_2_9(2)) {
                jj_consume_token(52);
                n2 = FirstPriorety();
                                                               n.type = '%'; n.addChild(n1);n.addChild(n2);
              } else {
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
          }
        }
      }
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
                if (n2 == null)
                        {if (true) return n1;}
                else
                        {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  static final public TreeNode I() throws ParseException {
        TreeNode n;
        TreeNode n2;
        ExpressionNode e= new ExpressionNode();;
        Token t,t1;
        boolean isExp = false;
        TreeNode ee;
        TreeNode exp;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUM:
      t = jj_consume_token(NUM);
                                    n = new ConstNode(new Value(0,new Double(Double.parseDouble(t.image)) ) );
      break;
    case String:
      t = jj_consume_token(String);
                                       n = new ConstNode(new Value(1, new String(t.image.substring(1, t.image.length()-1)) ) );
      break;
    case 53:
      jj_consume_token(53);
      n = Exp();
                                       isExp = true;e.type = 'n';       e.addChild(n);e.addChild(n);
      break;
    case 34:
      jj_consume_token(34);
                               n = new ArrayNode();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
      case NUM:
      case ID:
      case String:
      case 34:
      case 46:
      case 53:
      case 56:
      case 57:
        exp = Exp();
                                                                     n.addChild(exp);
        break;
      default:
        jj_la1[11] = jj_gen;
        ;
      }
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 54:
          ;
          break;
        default:
          jj_la1[12] = jj_gen;
          break label_2;
        }
        jj_consume_token(54);
        exp = Exp();
                                                                                                            n.addChild(exp);
      }
      jj_consume_token(35);
      break;
    default:
      jj_la1[15] = jj_gen;
      if (jj_2_12(4)) {
        n = FunctionCallStatement();
      } else if (jj_2_13(2)) {
        t = jj_consume_token(ID);
        jj_consume_token(55);
                                                   n = new ObjectNode(); ((ObjectNode)n).name=t.image;
        if (jj_2_10(4)) {
          n2 = FunctionCallStatement();
                                                                                                              n = new ObjectNode(); ((ObjectNode)n).name=t.image; ((FunctionCallNode)n2).type=2; n.addChild(n2);
        } else if (jj_2_11(4)) {
          t1 = jj_consume_token(ID);
                                                                                          n2 = new VariableNode(); ((VariableNode)n2).var=t1.image; n.addChild(n2);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } else if (jj_2_14(3)) {
        t = jj_consume_token(ID);
                                                 n = new VariableNode(); ((VariableNode)n).var = t.image;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 34:
        case 56:
        case 57:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 34:
            jj_consume_token(34);
            ee = Exp();
                                                              n.addChild(ee); ((VariableNode)n).type = 5;
            jj_consume_token(35);
            break;
          case 56:
            jj_consume_token(56);
                                                        ((VariableNode)n).type = 1;
            break;
          case 57:
            jj_consume_token(57);
                                                        ((VariableNode)n).type = 2;
            break;
          default:
            jj_la1[13] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[14] = jj_gen;
          ;
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 56:
          jj_consume_token(56);
          t = jj_consume_token(ID);
                                        n = new VariableNode(); ((VariableNode)n).var = t.image; ((VariableNode)n).type = 3;
          break;
        case 57:
          jj_consume_token(57);
          t = jj_consume_token(ID);
                                        n = new VariableNode(); ((VariableNode)n).var = t.image; ((VariableNode)n).type = 4;
          break;
        default:
          jj_la1[16] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
                if(isExp)
                        {if (true) return e;}
                {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

//ObjectNode ObjectID():
//{
//  	ObjectNode n,n1,n2;
//}
//{
//  	n1 = ObjectStatement() "." <ID>
//  	{
//  	  n = new ObjectID();
//  	}
//}
  static final public IfNode IF_Statement() throws ParseException {
        IfNode n = new IfNode();
        StartNode n3,n2,n1 = new StartNode();
        TreeNode cond;
        TreeNode next;
    jj_consume_token(IF);
    jj_consume_token(46);
    cond = Exp();
                               n.addChild(cond);n.addChild(n1);
    jj_consume_token(47);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FOR:
    case WHILE:
    case DO:
    case VAR:
    case IF:
    case STOP:
    case FUNCTION:
    case NEW:
    case NUM:
    case PRINT:
    case READ:
    case ID:
    case String:
    case 34:
    case 46:
    case 53:
    case 56:
    case 57:
      next = Statement();
                                                                                          n1.addChild(next);
      break;
    case 58:
      jj_consume_token(58);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FOR:
        case WHILE:
        case DO:
        case VAR:
        case IF:
        case STOP:
        case FUNCTION:
        case NEW:
        case NUM:
        case PRINT:
        case READ:
        case ID:
        case String:
        case 34:
        case 46:
        case 53:
        case 56:
        case 57:
          ;
          break;
        default:
          jj_la1[17] = jj_gen;
          break label_3;
        }
        next = Statement();
                                                   n1.addChild(next);
      }
      jj_consume_token(59);
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_4:
    while (true) {
      if (jj_2_15(6)) {
        ;
      } else {
        break label_4;
      }
      jj_consume_token(ELSEIF);
      jj_consume_token(46);
      cond = Exp();
                                                n.addChild(cond); n2 = new StartNode(); n.addChild(n2);
      jj_consume_token(47);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FOR:
      case WHILE:
      case DO:
      case VAR:
      case IF:
      case STOP:
      case FUNCTION:
      case NEW:
      case NUM:
      case PRINT:
      case READ:
      case ID:
      case String:
      case 34:
      case 46:
      case 53:
      case 56:
      case 57:
        next = Statement();
                                                                                                                                    n2.addChild(next);
        break;
      case 58:
        jj_consume_token(58);
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case FOR:
          case WHILE:
          case DO:
          case VAR:
          case IF:
          case STOP:
          case FUNCTION:
          case NEW:
          case NUM:
          case PRINT:
          case READ:
          case ID:
          case String:
          case 34:
          case 46:
          case 53:
          case 56:
          case 57:
            ;
            break;
          default:
            jj_la1[19] = jj_gen;
            break label_5;
          }
          next = Statement();
                                          n2.addChild(next);
        }
        jj_consume_token(59);
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    if (jj_2_16(6)) {
      jj_consume_token(ELSE);
                             n.hasElse = true; n3 = new StartNode(); n.addChild(n3);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FOR:
      case WHILE:
      case DO:
      case VAR:
      case IF:
      case STOP:
      case FUNCTION:
      case NEW:
      case NUM:
      case PRINT:
      case READ:
      case ID:
      case String:
      case 34:
      case 46:
      case 53:
      case 56:
      case 57:
        next = Statement();
                                                                                                            n3.addChild(next);
        break;
      case 58:
        jj_consume_token(58);
        label_6:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case FOR:
          case WHILE:
          case DO:
          case VAR:
          case IF:
          case STOP:
          case FUNCTION:
          case NEW:
          case NUM:
          case PRINT:
          case READ:
          case ID:
          case String:
          case 34:
          case 46:
          case 53:
          case 56:
          case 57:
            ;
            break;
          default:
            jj_la1[21] = jj_gen;
            break label_6;
          }
          next = Statement();
                                          n3.addChild(next);
        }
        jj_consume_token(59);
        break;
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else {
      ;
    }
         {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  static final public ForNode FOR_Statement() throws ParseException {
        ForNode n = new ForNode();
        TreeNode n1;
        TreeNode n2;
        TreeNode n3;
        StartNode n4 = new StartNode();
        TreeNode next;
    jj_consume_token(FOR);
    jj_consume_token(46);
    n1 = Assignment();
    jj_consume_token(SEMICOLON);
    n2 = Exp();
    jj_consume_token(SEMICOLON);
    if (jj_2_17(2)) {
      n3 = Assignment();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
      case NUM:
      case ID:
      case String:
      case 34:
      case 46:
      case 53:
      case 56:
      case 57:
        n3 = Exp();
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(47);
                                                                                               n.addChild(n1); n.addChild(n2); n.addChild(n3); n.addChild(n4);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FOR:
    case WHILE:
    case DO:
    case VAR:
    case IF:
    case STOP:
    case FUNCTION:
    case NEW:
    case NUM:
    case PRINT:
    case READ:
    case ID:
    case String:
    case 34:
    case 46:
    case 53:
    case 56:
    case 57:
      next = Statement();
                            n4.addChild(next);
      break;
    case 58:
      jj_consume_token(58);
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FOR:
        case WHILE:
        case DO:
        case VAR:
        case IF:
        case STOP:
        case FUNCTION:
        case NEW:
        case NUM:
        case PRINT:
        case READ:
        case ID:
        case String:
        case 34:
        case 46:
        case 53:
        case 56:
        case 57:
          ;
          break;
        default:
          jj_la1[24] = jj_gen;
          break label_7;
        }
        next = Statement();
                                 n4.addChild(next);
      }
      jj_consume_token(59);
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
         {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  static final public WhileNode While_Statement() throws ParseException {
        WhileNode n = new WhileNode();
        TreeNode n1;
        StartNode n2 = new StartNode();
        TreeNode next;
    jj_consume_token(WHILE);
    jj_consume_token(46);
    n1 = Exp();
    jj_consume_token(47);
                 n.addChild(n1);n.addChild(n2);
    jj_consume_token(58);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FOR:
      case WHILE:
      case DO:
      case VAR:
      case IF:
      case STOP:
      case FUNCTION:
      case NEW:
      case NUM:
      case PRINT:
      case READ:
      case ID:
      case String:
      case 34:
      case 46:
      case 53:
      case 56:
      case 57:
        ;
        break;
      default:
        jj_la1[26] = jj_gen;
        break label_8;
      }
      next = Statement();
                                n2.addChild(next);
    }
    jj_consume_token(59);
         {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  static final public DoWhileNode DoWhile_Statement() throws ParseException {
        DoWhileNode n = new DoWhileNode();
        TreeNode n1;
        StartNode n2 = new StartNode();
        TreeNode next;
    jj_consume_token(DO);
    jj_consume_token(58);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FOR:
      case WHILE:
      case DO:
      case VAR:
      case IF:
      case STOP:
      case FUNCTION:
      case NEW:
      case NUM:
      case PRINT:
      case READ:
      case ID:
      case String:
      case 34:
      case 46:
      case 53:
      case 56:
      case 57:
        ;
        break;
      default:
        jj_la1[27] = jj_gen;
        break label_9;
      }
      next = Statement();
                                n2.addChild(next);
    }
    jj_consume_token(59);
    jj_consume_token(WHILE);
    jj_consume_token(46);
    n1 = Exp();
    jj_consume_token(47);
         n.addChild(n1);n.addChild(n2);
         {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  static final public TreeNode StopStatement() throws ParseException {
        TreeNode e;
        StopNode n = new StopNode();
        Token t;
    t = jj_consume_token(STOP);
                    n.type = Stop.valueOf(t.image+"s");
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NEW:
    case NUM:
    case ID:
    case String:
    case 34:
    case 46:
    case 53:
    case 56:
    case 57:
      e = Exp();
                                                                     n.addChild(e);
      break;
    default:
      jj_la1[28] = jj_gen;
      ;
    }
         {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  static final public PrintNode PRINT_Command() throws ParseException {
        PrintNode n = new PrintNode();
        TreeNode next;
    jj_consume_token(PRINT);
    next = Exp();
                                      n.addChild(next);
         {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  static final public ReadNode Read_Command() throws ParseException {
        ReadNode n = new ReadNode();
        Token t;
    jj_consume_token(READ);
    jj_consume_token(46);
    t = jj_consume_token(ID);
                n.image = t.image;
    jj_consume_token(47);
         {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  static final public FunctionNode FunctionStatement() throws ParseException {
        FunctionNode f = new FunctionNode();
        StartNode n = new StartNode();
        TreeNode next;
        Token t;
    jj_consume_token(FUNCTION);
    t = jj_consume_token(ID);
                             f.name = t.image;
    jj_consume_token(46);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      t = jj_consume_token(ID);
                                                              f.params.add(t.image);
      break;
    default:
      jj_la1[29] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 54:
      label_10:
      while (true) {
        jj_consume_token(54);
        t = jj_consume_token(ID);
                                                                                                        f.params.add(t.image);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 54:
          ;
          break;
        default:
          jj_la1[30] = jj_gen;
          break label_10;
        }
      }
      break;
    default:
      jj_la1[31] = jj_gen;
      ;
    }
    jj_consume_token(47);
    jj_consume_token(58);
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FOR:
      case WHILE:
      case DO:
      case VAR:
      case IF:
      case STOP:
      case FUNCTION:
      case NEW:
      case NUM:
      case PRINT:
      case READ:
      case ID:
      case String:
      case 34:
      case 46:
      case 53:
      case 56:
      case 57:
        ;
        break;
      default:
        jj_la1[32] = jj_gen;
        break label_11;
      }
      next = Statement();
                                     n.addChild(next);
    }
    jj_consume_token(59);
         f.addChild(n);
         {if (true) return f;}
    throw new Error("Missing return statement in function");
  }

  static final public FunctionCallNode FunctionCallStatement() throws ParseException {
        TreeNode e;
        FunctionCallNode f = new FunctionCallNode();
        Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      t = jj_consume_token(ID);
                    f.name = t.image;
      jj_consume_token(46);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
      case NUM:
      case ID:
      case String:
      case 34:
      case 46:
      case 53:
      case 56:
      case 57:
        e = Exp();
                                                      f.addChild(e);
        break;
      default:
        jj_la1[33] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 54:
        label_12:
        while (true) {
          jj_consume_token(54);
          e = Exp();
                                                                                         f.addChild(e);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 54:
            ;
            break;
          default:
            jj_la1[34] = jj_gen;
            break label_12;
          }
        }
        break;
      default:
        jj_la1[35] = jj_gen;
        ;
      }
      jj_consume_token(47);
      break;
    case NEW:
      jj_consume_token(NEW);
                    f.type=1;
      t = jj_consume_token(ID);
                                         f.name = t.image;
      jj_consume_token(46);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
      case NUM:
      case ID:
      case String:
      case 34:
      case 46:
      case 53:
      case 56:
      case 57:
        e = Exp();
                                                                           f.addChild(e);
        break;
      default:
        jj_la1[36] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 54:
        label_13:
        while (true) {
          jj_consume_token(54);
          e = Exp();
                                                                                                              f.addChild(e);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 54:
            ;
            break;
          default:
            jj_la1[37] = jj_gen;
            break label_13;
          }
        }
        break;
      default:
        jj_la1[38] = jj_gen;
        ;
      }
      jj_consume_token(47);
      break;
    default:
      jj_la1[39] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
         {if (true) return f;}
    throw new Error("Missing return statement in function");
  }

  static final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static final private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static final private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  static final private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  static final private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  static final private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  static final private boolean jj_3R_78() {
    if (jj_3R_34()) return true;
    return false;
  }

  static final private boolean jj_3R_71() {
    if (jj_scan_token(DO)) return true;
    if (jj_scan_token(58)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_78()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(59)) return true;
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(46)) return true;
    return false;
  }

  static final private boolean jj_3R_24() {
    if (jj_scan_token(34)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(35)) return true;
    return false;
  }

  static final private boolean jj_3R_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(12)) jj_scanpos = xsp;
    if (jj_scan_token(ID)) return true;
    xsp = jj_scanpos;
    if (jj_3R_24()) jj_scanpos = xsp;
    if (jj_scan_token(36)) return true;
    xsp = jj_scanpos;
    if (jj_3R_25()) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3R_82() {
    if (jj_scan_token(54)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static final private boolean jj_3R_70() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(46)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(47)) return true;
    if (jj_scan_token(58)) return true;
    return false;
  }

  static final private boolean jj_3R_56() {
    if (jj_3R_74()) return true;
    return false;
  }

  static final private boolean jj_3R_55() {
    if (jj_3R_73()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static final private boolean jj_3R_53() {
    if (jj_3R_71()) return true;
    return false;
  }

  static final private boolean jj_3R_52() {
    if (jj_3R_70()) return true;
    return false;
  }

  static final private boolean jj_3R_51() {
    if (jj_3R_69()) return true;
    return false;
  }

  static final private boolean jj_3R_69() {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(46)) return true;
    if (jj_3R_14()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static final private boolean jj_3R_50() {
    if (jj_3R_68()) return true;
    return false;
  }

  static final private boolean jj_3R_54() {
    if (jj_3R_72()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static final private boolean jj_3R_49() {
    if (jj_3R_67()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static final private boolean jj_3_11() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static final private boolean jj_3R_36() {
    if (jj_3R_34()) return true;
    return false;
  }

  static final private boolean jj_3_3() {
    if (jj_3R_16()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static final private boolean jj_3_10() {
    if (jj_3R_16()) return true;
    return false;
  }

  static final private boolean jj_3R_77() {
    if (jj_scan_token(58)) return true;
    return false;
  }

  static final private boolean jj_3_1() {
    if (jj_3R_14()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static final private boolean jj_3R_35() {
    if (jj_3R_34()) return true;
    return false;
  }

  static final private boolean jj_3R_58() {
    if (jj_scan_token(54)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static final private boolean jj_3_2() {
    if (jj_3R_15()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static final private boolean jj_3R_23() {
    if (jj_scan_token(58)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_36()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(59)) return true;
    return false;
  }

  static final private boolean jj_3R_40() {
    Token xsp;
    if (jj_3R_58()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_58()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_21() {
    if (jj_scan_token(58)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_35()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(59)) return true;
    return false;
  }

  static final private boolean jj_3R_34() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static final private boolean jj_3R_32() {
    if (jj_scan_token(57)) return true;
    return false;
  }

  static final private boolean jj_3R_31() {
    if (jj_scan_token(56)) return true;
    return false;
  }

  static final private boolean jj_3_16() {
    if (jj_scan_token(ELSE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) return true;
    }
    return false;
  }

  static final private boolean jj_3R_81() {
    if (jj_3R_17()) return true;
    return false;
  }

  static final private boolean jj_3R_30() {
    if (jj_scan_token(34)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(35)) return true;
    return false;
  }

  static final private boolean jj_3R_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) return true;
    }
    }
    return false;
  }

  static final private boolean jj_3_15() {
    if (jj_scan_token(ELSEIF)) return true;
    if (jj_scan_token(46)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(47)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) return true;
    }
    return false;
  }

  static final private boolean jj_3R_68() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(46)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(47)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) return true;
    }
    return false;
  }

  static final private boolean jj_3R_83() {
    if (jj_scan_token(54)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static final private boolean jj_3R_80() {
    Token xsp;
    if (jj_3R_83()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_83()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_57() {
    if (jj_scan_token(54)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static final private boolean jj_3R_38() {
    Token xsp;
    if (jj_3R_57()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_57()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_64() {
    if (jj_scan_token(57)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static final private boolean jj_3R_39() {
    if (jj_3R_17()) return true;
    return false;
  }

  static final private boolean jj_3R_63() {
    if (jj_scan_token(56)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static final private boolean jj_3_14() {
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_19()) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3_13() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(55)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3_11()) return true;
    }
    return false;
  }

  static final private boolean jj_3_12() {
    if (jj_3R_16()) return true;
    return false;
  }

  static final private boolean jj_3R_62() {
    if (jj_scan_token(34)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_81()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_82()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(35)) return true;
    return false;
  }

  static final private boolean jj_3R_61() {
    if (jj_scan_token(53)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static final private boolean jj_3R_60() {
    if (jj_scan_token(String)) return true;
    return false;
  }

  static final private boolean jj_3R_59() {
    if (jj_scan_token(NUM)) return true;
    return false;
  }

  static final private boolean jj_3R_37() {
    if (jj_3R_17()) return true;
    return false;
  }

  static final private boolean jj_3R_79() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static final private boolean jj_3R_66() {
    if (jj_scan_token(51)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  static final private boolean jj_3R_41() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static final private boolean jj_3R_65() {
    if (jj_scan_token(49)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static final private boolean jj_3_9() {
    if (jj_scan_token(52)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  static final private boolean jj_3R_29() {
    if (jj_3R_41()) return true;
    return false;
  }

  static final private boolean jj_3_8() {
    if (jj_scan_token(50)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  static final private boolean jj_3_7() {
    if (jj_scan_token(48)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  static final private boolean jj_3R_42() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3_9()) return true;
    }
    }
    }
    }
    return false;
  }

  static final private boolean jj_3R_27() {
    if (jj_scan_token(NEW)) return true;
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(46)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_39()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_40()) jj_scanpos = xsp;
    if (jj_scan_token(47)) return true;
    return false;
  }

  static final private boolean jj_3R_26() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(46)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_37()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_38()) jj_scanpos = xsp;
    if (jj_scan_token(47)) return true;
    return false;
  }

  static final private boolean jj_3R_28() {
    if (jj_scan_token(46)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(47)) return true;
    return false;
  }

  static final private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) return true;
    }
    return false;
  }

  static final private boolean jj_3R_75() {
    if (jj_3R_17()) return true;
    return false;
  }

  static final private boolean jj_3R_25() {
    if (jj_3R_17()) return true;
    return false;
  }

  static final private boolean jj_3R_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_42()) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3R_48() {
    if (jj_scan_token(42)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static final private boolean jj_3_6() {
    if (jj_scan_token(45)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static final private boolean jj_3R_47() {
    if (jj_scan_token(41)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static final private boolean jj_3_5() {
    if (jj_scan_token(44)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static final private boolean jj_3R_46() {
    if (jj_scan_token(40)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static final private boolean jj_3_4() {
    if (jj_scan_token(43)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static final private boolean jj_3R_45() {
    if (jj_scan_token(39)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static final private boolean jj_3R_44() {
    if (jj_scan_token(38)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static final private boolean jj_3R_20() {
    if (jj_3R_34()) return true;
    return false;
  }

  static final private boolean jj_3R_33() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3_6()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static final private boolean jj_3R_43() {
    if (jj_scan_token(37)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static final private boolean jj_3R_74() {
    if (jj_scan_token(FUNCTION)) return true;
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(46)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_79()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_80()) jj_scanpos = xsp;
    if (jj_scan_token(47)) return true;
    if (jj_scan_token(58)) return true;
    return false;
  }

  static final private boolean jj_3R_72() {
    if (jj_scan_token(READ)) return true;
    if (jj_scan_token(46)) return true;
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(47)) return true;
    return false;
  }

  static final private boolean jj_3R_22() {
    if (jj_3R_34()) return true;
    return false;
  }

  static final private boolean jj_3R_67() {
    if (jj_scan_token(PRINT)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static final private boolean jj_3R_17() {
    if (jj_3R_18()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_33()) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3R_15() {
    if (jj_3R_17()) return true;
    return false;
  }

  static final private boolean jj_3_17() {
    if (jj_3R_14()) return true;
    return false;
  }

  static final private boolean jj_3R_73() {
    if (jj_scan_token(STOP)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_75()) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3R_76() {
    if (jj_3R_34()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  static public JSTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  static public Token token, jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static public boolean lookingAhead = false;
  static private boolean jj_semLA;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[40];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_0();
      jj_la1_1();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0xee03e00,0xc602e00,0x1000,0x0,0x2800000,0x0,0x0,0x2800000,0x0,0x0,0x0,0x2800000,0x0,0x0,0x0,0x2000000,0x0,0xee03e00,0xee03e00,0xee03e00,0xee03e00,0xee03e00,0xee03e00,0x2800000,0xee03e00,0xee03e00,0xee03e00,0xee03e00,0x2800000,0x0,0x0,0x0,0xee03e00,0x2800000,0x0,0x0,0x2800000,0x0,0x0,0x800000,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x3204007,0x0,0x0,0x4,0x3204007,0x7e0,0x3fe0,0x3204007,0x20000,0x80000,0x1f0000,0x3204007,0x400000,0x3000004,0x3000004,0x200006,0x3000000,0x3204007,0x7204007,0x3204007,0x7204007,0x3204007,0x7204007,0x3204007,0x3204007,0x7204007,0x3204007,0x3204007,0x3204007,0x1,0x400000,0x400000,0x3204007,0x3204007,0x400000,0x400000,0x3204007,0x400000,0x400000,0x1,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[17];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  public JS(java.io.InputStream stream) {
     this(stream, null);
  }
  public JS(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new JSTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public JS(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new JSTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public JS(JSTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(JSTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  static final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.Vector<int[]> jj_expentries = new java.util.Vector<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  static public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[60];
    for (int i = 0; i < 60; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 40; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 60; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  static final public void enable_tracing() {
  }

  static final public void disable_tracing() {
  }

  static final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 17; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
