/**
 * JavaCC file
 */

options {
  JDK_VERSION = "1.5";
}
PARSER_BEGIN(JSP)

public class JSP {
  public static void main(String args[]) throws ParseException {
    eg1 parser = new eg1(System.in);
    while (true) {
      System.out.println("Reading from standard input...");
      System.out.print("Enter an expression like \"1+(2+3);\" :");
      try {
        switch (eg1.one_line()) {
        case 0:
          System.out.println("OK.");
          break;
        case 1:
          System.out.println("Goodbye.");
          break;
        default:
          break;
        }
      } catch (Exception e) {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
        JSP.ReInit(System.in);
      } catch (Error e) {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        break;
      }
    }
  }
}
PARSER_END(JSP)

SKIP :
{
 	" "
|	"\r"
|	"\t"
|	"\n"
}

TOKEN :
{
    < CONSTANT: ( <DIGIT> )+ >
|   < #DIGIT: ["0" - "9"] >
}

TOKEN:
{
< DELETE: "delete" >
|
< FUNCTION: "function" >
|
< IN: "in" >
|
< CASE: "case" >
|
< NEW: "new" >
|
< RETURN: "return" >
|
< THIS: "this" >
|
< TYPEOF: "typeof" >
|
< VOID: "void" >
|
< WITH: "with" >
|
< CATCH: "catch" >
|
< CLASS: "class" >
|
< CONST: "const" >
|
< DEBUGGER: "debugger" >
|
< _DEFAULT: "default" >
|
< ENUM: "enum" >
|
< EXPORT: "export" >
|
< EXTENDS: "extends" >
|
< FINALLY: "finally" >
|
< IMPORT: "import" >
|
< SUPER: "super" >
|
< SWITCH: "switch" >
|
< THROW: "throw" >
|
< TRY: "try" >
|
< VAR: "var" >
|
< BREAK: "break" >
|
< CONTINUE: "continue" >
|
< IF: "if" >
|
< ELSE: "else" >
|
< DO: "do" >
|
< WHILE: "while" >
|
< FOR: "for" >
|
< LEFTBRACE: "{" >
|
< RIGHTBRACE: "}" >
|
< LEFTPAREN: "(" >
|
< RIghtPAREN: ")" >
|
< LEFTBRACKET: "[" >
|
< RIGHTBRACKET: "]" >
|
< DOT: "." >
|
< SEMICOLON: ";" >
|
< COMMA: "," >
|
< Less_than: "<">
|
< Greater_than: ">">
|
< Less_than_or_Equal: "<=">
|
< Greater_than_or_Equal: ">=">
|
< EQ: "==" >
|
< Not_equal: "!=">
|
< Strict_Equals_Operator: "===" >
|
< Strict_Does_not_equal_Operator: "!==" >
|
< EOL: ("\r\n" | ":")+ >
|
< MOD: "%" >
|
< NOT: "!" >
|
< DIVIDE: "/" >
|
< PLUS: "+" >
|
< MINUS: "-" >
|
< MULTIPLY: "*" >
|
< INCR: "++" >
|
< DECR: "--" >
|
< LSHIFT: "<<" >
|
< RSHIFT: ">>" >
|
< RUNSHIFT: ">>>" >
|
< BIT_AND: "&" >
|
< BIT_OR: "|" >
|
< XOR: "^" >
|
< TILDE: "~" >
|
< SC_AND: "&&" >
|
< SC_OR: "||" >
|
< HOOK: "?" >
|
< COLON: ":" >
|
< ASSIGN: "=" >
|
< PLUSASSIGN: "+=" >
|
< MINUSASSIGN: "-=" >
|
< STARASSIGN: "*=" >
|
< REMASSIGN: "%=" >
|
< LSHIFTASSIGN: "<<=" >
|
< RSIGNEDSHIFTASSIGN: ">>=" >
|
< RUNSIGNEDSHIFTASSIGN: ">>>=" >
|
< ANDASSIGN: "&=" >
|
< ORASSIGN: "|=" >
|
< XORASSIGN: "^=" >
}


int one_line() : {}
{
  sum() ";" { return 0; }
| ";"	    { return 1; }
}
void sum() : {}
{
  term() (( <PLUS> | <MINUS> ) term())*
}
void term() : {}
{
  unary() (( <MULTIPLY> | <DIVIDE> ) unary())*
}
void unary() : {}
{
  <MINUS> element()
 | element()
}
void element() : {}
{
  <CONSTANT>
| "(" sum() ")"
}
