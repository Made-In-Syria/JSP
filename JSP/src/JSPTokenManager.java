/* Generated By:JavaCC: Do not edit this line. JSPTokenManager.java */

public class JSPTokenManager implements JSPConstants
{
  public static  java.io.PrintStream debugStream = System.out;
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x800L) != 0L)
         {
            jjmatchedKind = 56;
            return 5;
         }
         if ((active0 & 0x4L) != 0L)
            return 1;
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
static private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 13:
         return jjStartNfaWithStates_0(0, 2, 1);
      case 33:
         jjmatchedKind = 58;
         return jjMoveStringLiteralDfa1_0(0xa0000000000000L, 0x0L);
      case 37:
         jjmatchedKind = 57;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000L);
      case 38:
         jjmatchedKind = 68;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100100L);
      case 40:
         return jjStopAtPos(0, 41);
      case 41:
         return jjStopAtPos(0, 42);
      case 42:
         jjmatchedKind = 62;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000L);
      case 43:
         jjmatchedKind = 60;
         return jjMoveStringLiteralDfa1_0(0x8000000000000000L, 0x2000L);
      case 44:
         return jjStopAtPos(0, 47);
      case 45:
         jjmatchedKind = 61;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4001L);
      case 46:
         return jjStopAtPos(0, 45);
      case 47:
         return jjStopAtPos(0, 59);
      case 58:
         return jjStartNfaWithStates_0(0, 56, 5);
      case 59:
         return jjStopAtPos(0, 46);
      case 60:
         jjmatchedKind = 48;
         return jjMoveStringLiteralDfa1_0(0x4000000000000L, 0x20002L);
      case 61:
         jjmatchedKind = 76;
         return jjMoveStringLiteralDfa1_0(0x50000000000000L, 0x0L);
      case 62:
         jjmatchedKind = 49;
         return jjMoveStringLiteralDfa1_0(0x8000000000000L, 0xc000cL);
      case 63:
         return jjStopAtPos(0, 74);
      case 91:
         return jjStopAtPos(0, 43);
      case 93:
         return jjStopAtPos(0, 44);
      case 94:
         jjmatchedKind = 70;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x100000000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x2000e0400L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x1000300080L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x801c00000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x4002000100L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x404000200L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x800L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x1000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x18000000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x60006000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x80008000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x2000010000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 39);
      case 124:
         jjmatchedKind = 69;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200200L);
      case 125:
         return jjStopAtPos(0, 40);
      case 126:
         return jjStopAtPos(0, 71);
      default :
         return jjMoveNfa_0(4, 0);
   }
}
static private final int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active1 & 0x100L) != 0L)
            return jjStopAtPos(1, 72);
         break;
      case 43:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(1, 63);
         break;
      case 45:
         if ((active1 & 0x1L) != 0L)
            return jjStopAtPos(1, 64);
         break;
      case 60:
         if ((active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x20000L);
      case 61:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(1, 50);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStopAtPos(1, 51);
         else if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x2000L) != 0L)
            return jjStopAtPos(1, 77);
         else if ((active1 & 0x4000L) != 0L)
            return jjStopAtPos(1, 78);
         else if ((active1 & 0x8000L) != 0L)
            return jjStopAtPos(1, 79);
         else if ((active1 & 0x10000L) != 0L)
            return jjStopAtPos(1, 80);
         else if ((active1 & 0x100000L) != 0L)
            return jjStopAtPos(1, 84);
         else if ((active1 & 0x200000L) != 0L)
            return jjStopAtPos(1, 85);
         else if ((active1 & 0x400000L) != 0L)
            return jjStopAtPos(1, 86);
         return jjMoveStringLiteralDfa2_0(active0, 0xc0000000000000L, active1, 0L);
      case 62:
         if ((active1 & 0x4L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xc0008L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x80020400L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x301880L, active1, 0L);
      case 102:
         if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(1, 34);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x2020002000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x2010000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x800040000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000L, active1, 0L);
      case 110:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(1, 9);
         return jjMoveStringLiteralDfa2_0(active0, 0x400000L, active1, 0L);
      case 111:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(1, 36);
         return jjMoveStringLiteralDfa2_0(active0, 0x4200088000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x140000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000100L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x1800000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000L, active1, 0L);
      case 124:
         if ((active1 & 0x200L) != 0L)
            return jjStopAtPos(1, 73);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
static private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(2, 54);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStopAtPos(2, 55);
         else if ((active1 & 0x20000L) != 0L)
            return jjStopAtPos(2, 81);
         else if ((active1 & 0x40000L) != 0L)
            return jjStopAtPos(2, 82);
         break;
      case 62:
         if ((active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80000L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x201000a000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x80L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x202080100L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0xc804000L, active1, 0L);
      case 114:
         if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(2, 31);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(2, 38);
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000400L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x1031000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000L, active1, 0L);
      case 119:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(2, 11);
         break;
      case 121:
         if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(2, 30);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
static private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 61:
         if ((active1 & 0x80000L) != 0L)
            return jjStopAtPos(3, 83);
         break;
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x102200000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x20100L, active1, 0L);
      case 100:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(3, 15);
         break;
      case 101:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(3, 10);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(3, 35);
         return jjMoveStringLiteralDfa4_0(active0, 0x9004080L, active1, 0L);
      case 104:
         if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(3, 16);
         break;
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000L, active1, 0L);
      case 109:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(3, 22);
         break;
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x24800000L, active1, 0L);
      case 115:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(3, 13);
         return jjMoveStringLiteralDfa4_0(active0, 0xc0000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x210000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x101000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
static private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000L);
      case 101:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(4, 37);
         break;
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000L);
      case 104:
         if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(4, 17);
         break;
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000L);
      case 107:
         if ((active0 & 0x100000000L) != 0L)
            return jjStopAtPos(4, 32);
         break;
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000L);
      case 114:
         if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(4, 27);
         return jjMoveStringLiteralDfa5_0(active0, 0x4801000L);
      case 115:
         if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(4, 18);
         break;
      case 116:
         if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(4, 19);
         return jjMoveStringLiteralDfa5_0(active0, 0x180L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000L);
      case 119:
         if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(4, 29);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
static private final int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000L);
      case 101:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(5, 7);
         break;
      case 102:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(5, 14);
         break;
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000L);
      case 104:
         if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(5, 28);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x100L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x2200000L);
      case 110:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(5, 12);
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000L);
      case 116:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(5, 23);
         else if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(5, 26);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
static private final int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x100L);
      case 115:
         if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(6, 24);
         break;
      case 116:
         if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(6, 21);
         break;
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000L);
      case 121:
         if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(6, 25);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
static private final int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x200000000L) != 0L)
            return jjStopAtPos(7, 33);
         break;
      case 110:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(7, 8);
         break;
      case 114:
         if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(7, 20);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
static private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
static private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
static private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 4:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 5)
                        kind = 5;
                     jjCheckNAdd(0);
                  }
                  else if (curChar == 58)
                  {
                     if (kind > 56)
                        kind = 56;
                     jjCheckNAddTwoStates(2, 3);
                  }
                  else if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 5:
                  if (curChar == 58)
                  {
                     if (kind > 56)
                        kind = 56;
                     jjCheckNAddTwoStates(2, 3);
                  }
                  else if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  kind = 5;
                  jjCheckNAdd(0);
                  break;
               case 1:
                  if (curChar != 10)
                     break;
                  kind = 56;
                  jjCheckNAddTwoStates(2, 3);
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if (curChar != 58)
                     break;
                  kind = 56;
                  jjCheckNAddTwoStates(2, 3);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
};
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, "\144\145\154\145\164\145", 
"\146\165\156\143\164\151\157\156", "\151\156", "\143\141\163\145", "\156\145\167", "\162\145\164\165\162\156", 
"\164\150\151\163", "\164\171\160\145\157\146", "\166\157\151\144", "\167\151\164\150", 
"\143\141\164\143\150", "\143\154\141\163\163", "\143\157\156\163\164", 
"\144\145\142\165\147\147\145\162", "\144\145\146\141\165\154\164", "\145\156\165\155", 
"\145\170\160\157\162\164", "\145\170\164\145\156\144\163", "\146\151\156\141\154\154\171", 
"\151\155\160\157\162\164", "\163\165\160\145\162", "\163\167\151\164\143\150", "\164\150\162\157\167", 
"\164\162\171", "\166\141\162", "\142\162\145\141\153", "\143\157\156\164\151\156\165\145", 
"\151\146", "\145\154\163\145", "\144\157", "\167\150\151\154\145", "\146\157\162", 
"\173", "\175", "\50", "\51", "\133", "\135", "\56", "\73", "\54", "\74", "\76", 
"\74\75", "\76\75", "\75\75", "\41\75", "\75\75\75", "\41\75\75", null, "\45", "\41", 
"\57", "\53", "\55", "\52", "\53\53", "\55\55", "\74\74", "\76\76", "\76\76\76", 
"\46", "\174", "\136", "\176", "\46\46", "\174\174", "\77", "\72", "\75", "\53\75", 
"\55\75", "\52\75", "\45\75", "\74\74\75", "\76\76\75", "\76\76\76\75", "\46\75", 
"\174\75", "\136\75", };
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0xffffffffffffffa1L, 0x7fffffL, 
};
static final long[] jjtoSkip = {
   0x1eL, 0x0L, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[4];
static private final int[] jjstateSet = new int[8];
static protected char curChar;
public JSPTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}
public JSPTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 4; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
static public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

public static Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}
